'''entertainment.py is run to generate an .html file filled with Darren
Abramson's favorite movies ordered by metascore.

It requires the following files to run:

    fresh_tomatoes.py
    media.py
    getmetascore.py

It only imports the first two since media.py depends on getmetascore.py

In short, it creates objects of type media.Movie, stores them in an
array, sorts the objects by metascore, and then calls
fresh_tomatoes.open_movies_page on the resulting array.
'''
    

import media
import fresh_tomatoes

# Web retrieval can be unpredictable. Therefore progress for each movie's
# metascore extraction is printed to the terminal.
print("Movies' metascores are printed as they are extracted from the web. \n"
      "Movies are then sorted before being displayed.")

# This media.Movie initalization is unchanged from the suggested Udacity
# structure. Metascore is generated by media.py.
blade_runner = media.Movie("Blade Runner",
                           "Combines a lack of directorial control with voice o"
                           "vers.",
                           "http://www.thebestlittlefilmhouse.com/ekmps/shops/t"
                           "blfh01/"
                           "images/blade-runner-1982-original-us-one-sheet-film"
                           "-poster-linen-backed-and-ready-to-frame-ridley-scot"
                           "t.-with-harrison-ford--9943-p.jpg",
                           "https://www.youtube.com/watch?v=KPcZHjKJBnE")

m_2001 = media.Movie("2001: A Space Odyssey",
                   "What happens when the computer takes over.",
                   "https://d12vb6dvkz909q.cloudfront.net/uploads/galleries/235"
                   "52/2001-poster.jpg",
                   "https://www.youtube.com/watch?v=N6ywMnbef6Y")

repo_man = media.Movie("Repo Man",
                       "Life's what you make it.",
                       "http://d12vb6dvkz909q.cloudfront.net/uploads/galleries/"
                       "29209/repo-man.jpg",
                       "https://www.youtube.com/watch?v=DLGrXGEMOSo")

prometheus = media.Movie("Prometheus",
                         "Imagine if people were cattle.",
                         "http://static.comicvine.com/uploads/original/1/15659/"
                         "4073325-prometheus-2012-movie_poster.jpg",
                         "https://www.youtube.com/watch?v=sftuxbvGwiU")

the_fountain = media.Movie("The Fountain",
                           "Philosophy, done by movie.",
                           "http://thepulppress.com/wp-content/uploads/2015/01/"
                           "Poster-The-Fountain.jpg",
                           "https://www.youtube.com/watch?v=dAuxryJ6pv8")

groundhog_day= media.Movie("Groundhog Day",
                           "This was great long before the Bill Murray bandwago"
                           "n.",
                           "https://www.movieposter.com/posters/archive/main/13"
                           "/MPW-6738",
                           "https://www.youtube.com/watch?v=tSVeDx9fk60")

uhf = media.Movie("UHF",
                  "This was great long before the Weird Al bandwagon. Wait, is "
                  "there one?",
                  "http://www.circlecinema.com/wp-content/uploads/2013/08/936fu"
                  "ll-uhf-poster.jpg",
                  "https://www.youtube.com/watch?v=tIJ6utj-DcU")



# For readability, movies are added to array in order defined above.
movies = [blade_runner, m_2001, repo_man, prometheus, the_fountain,
          groundhog_day, uhf]


# Sort movies in list from best to worst reviewed.
movies.sort(key = lambda x: x.metascore, reverse = True)

# Generate html file of movies with posters and links to trailers.
fresh_tomatoes.open_movies_page(movies)
